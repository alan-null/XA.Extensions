---
ID: "0938fc70-6351-4747-bda2-14d35ed086c1"
Parent: "4610001d-6ff9-4057-8f47-74ba0010c959"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: /sitecore/media library/Feature/XA Extensions/ToolboxSearchbox/ToolboxSearchbox/Scripts/Application
DB: master
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/0938FC7063514747BDA214D35ED086C1.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "65d724a3-42af-4826-a8ab-056f51efc560"
  Value: 
- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 15760
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20170508T141043Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: sitecore\Admin
